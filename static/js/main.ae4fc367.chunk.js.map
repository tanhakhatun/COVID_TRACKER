{"version":3,"sources":["api/fetchCovidData.js","components/flag/index.js","components/card/index.js","components/covid-map/index.js","CovidTracker.js","reportWebVitals.js","index.js"],"names":["refactorResponse","data","covidData","map","item","country","active","total","cases","deaths","recovered","countryInfo","fetchCovidData","a","fetch","json","refactoredData","console","error","Flag","src","flag","className","alt","Card","changeMapColor","heading","color","type","onClick","style","background","typeByColor","blue","red","green","grey","LocationMarker","lat","long","useState","position","setPosition","useMapEvents","locationfound","e","lng","flyTo","getZoom","Marker","Popup","CovidMap","mapMarkerInfo","selectedCountry","globalMaxCount","useMap","useEffect","locate","zoomIn","TileLayer","attribution","url","Object","keys","CircleMarker","center","pathOptions","radius","Math","max","Tooltip","App","setCovidData","isLoading","setIsLoading","setCountry","setMapMarkerInfo","setGlobalMaxCount","getCovidData","maxCasesData","forEach","setMapInfo","MapContainer","zoom","scrollWheelZoom","getWorldMap","value","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae4fc367.chunk.js","sourcesContent":["function refactorResponse(data) {\r\n  let covidData = {};\r\n  data?.map((item) => {\r\n    covidData[item.country] = {\r\n      active: item.active,\r\n      total: item.cases,\r\n      deaths: item.deaths,\r\n      recovered: item.recovered,\r\n      countryInfo: item.countryInfo,\r\n    };\r\n  });\r\n  return covidData;\r\n}\r\n\r\nexport async function fetchCovidData() {\r\n  try {\r\n    const data = await (\r\n      await fetch(\"https://corona.lmao.ninja/v2/countries?yesterday&sort\")\r\n    ).json();\r\n    const refactoredData = refactorResponse(data);\r\n    return refactoredData;\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nexport default function Flag({ countryInfo }) {\r\n  return (\r\n    <>\r\n      <img src={countryInfo?.flag} className=\"countryFlag\" alt=\"countryFlag\" />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nexport default function Card({ changeMapColor, heading, cases, color, type }) {\r\n  const setMapColor = () => {\r\n    changeMapColor(color, type);\r\n  };\r\n\r\n  return (\r\n    <div onClick={setMapColor} className=\"cardContainer\">\r\n      <h3>{heading}</h3>\r\n      <div className=\"cardBody\" style={{ background: color }}>\r\n        {cases}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  TileLayer,\r\n  Marker,\r\n  Popup,\r\n  CircleMarker,\r\n  Tooltip,\r\n  useMapEvents,\r\n  useMap,\r\n} from \"react-leaflet\";\r\n\r\nconst typeByColor = {\r\n  blue: \"total\",\r\n  red: \"active\",\r\n  green: \"recovered\",\r\n  grey: \"deaths\",\r\n};\r\n\r\nfunction LocationMarker({ lat, long }) {\r\n  const [position, setPosition] = useState(null);\r\n  const map = useMapEvents({\r\n    locationfound(e) {\r\n      setPosition({ lat: lat, lng: long });\r\n      map.flyTo({ lat: lat, lng: long }, map.getZoom(5));\r\n    },\r\n  });\r\n\r\n  return position === null ? null : (\r\n    <Marker position={position}>\r\n      <Popup>You are here</Popup>\r\n    </Marker>\r\n  );\r\n}\r\n\r\nexport default function CovidMap({\r\n  covidData,\r\n  mapMarkerInfo,\r\n  selectedCountry,\r\n  globalMaxCount,\r\n  lat,\r\n  long,\r\n}) {\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    map.locate();\r\n    map.zoomIn(1);\r\n  }, [lat, long]);\r\n  return (\r\n    <>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {Object.keys(covidData).map((country) => {\r\n        const { lat, long } = covidData[country]?.countryInfo;\r\n        return (\r\n          <CircleMarker\r\n            center={[lat, long]}\r\n            key={`${country}_map_id`}\r\n            pathOptions={{ color: mapMarkerInfo.color }}\r\n            radius={Math.max(\r\n              5,\r\n              (200 * covidData[country][mapMarkerInfo.type]) /\r\n                globalMaxCount[[mapMarkerInfo.type]]\r\n            )}\r\n          >\r\n            <Tooltip>\r\n              {covidData[country][typeByColor[mapMarkerInfo.color]]}\r\n            </Tooltip>\r\n          </CircleMarker>\r\n        );\r\n      })}\r\n      <LocationMarker lat={lat} long={long}>\r\n        <Popup>{selectedCountry}</Popup>\r\n      </LocationMarker>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { fetchCovidData } from \"./api/fetchCovidData\";\r\nimport Flag from \"./components/flag\";\r\nimport Card from \"./components/card\";\r\nimport { MapContainer } from \"react-leaflet\";\r\nimport CovidMap from \"./components/covid-map\";\r\nimport \"./CovidTracker.css\";\r\n\r\nfunction App() {\r\n  const [covidData, setCovidData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [country, setCountry] = useState(\"India\");\r\n  const [mapMarkerInfo, setMapMarkerInfo] = useState({\r\n    color: \"red\",\r\n    type: \"active\",\r\n  });\r\n  const [globalMaxCount, setGlobalMaxCount] = useState({\r\n    total: 0,\r\n    active: 0,\r\n    recovered: 0,\r\n    deaths: 0,\r\n  });\r\n\r\n  const getCovidData = async () => {\r\n    const data = await fetchCovidData();\r\n    setCovidData(data);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCovidData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const maxCasesData = {\r\n      total: 0,\r\n      active: 0,\r\n      recovered: 0,\r\n      deaths: 0,\r\n    };\r\n\r\n    Object.keys(covidData).forEach((country) => {\r\n      maxCasesData.total = Math.max(\r\n        maxCasesData.total,\r\n        covidData[country].total\r\n      );\r\n      maxCasesData.active = Math.max(\r\n        maxCasesData.active,\r\n        covidData[country].active\r\n      );\r\n      maxCasesData.recovered = Math.max(\r\n        maxCasesData.recovered,\r\n        covidData[country].recovered\r\n      );\r\n      maxCasesData.deaths = Math.max(\r\n        maxCasesData.deaths,\r\n        covidData[country].deaths\r\n      );\r\n    });\r\n    setGlobalMaxCount(maxCasesData);\r\n  }, [covidData]);\r\n\r\n  if (isLoading) {\r\n    return <div className=\"waitingLoader\">Waiting....</div>;\r\n  }\r\n\r\n  const getDropdownOptions = () => {\r\n    return Object.keys(covidData).map((country) => {\r\n      return <option key={country}>{country}</option>;\r\n    });\r\n  };\r\n\r\n  const changeCountry = (event) => {\r\n    setCountry(event.target.value);\r\n  };\r\n\r\n  const setMapInfo = (color, type) => {\r\n    setMapMarkerInfo({ color: color, type: type });\r\n  };\r\n\r\n  const getTrackerCards = () => {\r\n    return (\r\n      <div className=\"trackerCardsContainer\">\r\n        <Card\r\n          changeMapColor={setMapInfo}\r\n          heading=\"Total\"\r\n          cases={covidData[country].total}\r\n          color=\"blue\"\r\n          type=\"total\"\r\n        />\r\n        <Card\r\n          changeMapColor={setMapInfo}\r\n          heading=\"Active\"\r\n          cases={covidData[country].active}\r\n          color=\"red\"\r\n          type=\"active\"\r\n        />\r\n        <Card\r\n          changeMapColor={setMapInfo}\r\n          heading=\"Deaths\"\r\n          cases={covidData[country].deaths}\r\n          color=\"grey\"\r\n          type=\"deaths\"\r\n        />\r\n        <Card\r\n          changeMapColor={setMapInfo}\r\n          heading=\"Recovered\"\r\n          cases={covidData[country].recovered}\r\n          color=\"green\"\r\n          type=\"recovered\"\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const getWorldMap = () => {\r\n    const { lat, long } = covidData[country]?.countryInfo;\r\n    return (\r\n      <MapContainer\r\n        className=\"covidMap\"\r\n        center={[lat, long]}\r\n        zoom={3}\r\n        scrollWheelZoom={true}\r\n      >\r\n        <CovidMap\r\n          covidData={covidData}\r\n          mapMarkerInfo={mapMarkerInfo}\r\n          selectedCountry={country}\r\n          globalMaxCount={globalMaxCount}\r\n          lat={lat}\r\n          long={long}\r\n        />\r\n      </MapContainer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"covidTrackerContainer\">\r\n      <h1 className=\"covidTrackerHeading\">Covid tracker</h1>\r\n      <div className=\"covidTrackerBody\">\r\n        <div>{getWorldMap()}</div>\r\n        <div className=\"right\">\r\n          <div className=\"flagSelectContainer\">\r\n            <Flag countryInfo={covidData[country]?.countryInfo} />\r\n            <select\r\n              className=\"countryDropDown\"\r\n              value={country}\r\n              onChange={changeCountry}\r\n            >\r\n              {getDropdownOptions()}\r\n            </select>\r\n          </div>\r\n          <div className=\"cardsContainer\">{getTrackerCards()}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport CovidTracker from \"./CovidTracker\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CovidTracker />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}